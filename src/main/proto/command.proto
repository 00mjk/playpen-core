package net.thechunk.playpen.protocol;

option java_outer_classname = "Commands";

import "coordinator.proto";
import "p3.proto";

message Sync { // local -> network
    optional string name = 1;

    repeated Resource resources = 2;

    repeated string attributes = 3;

    repeated Server servers = 4;

    required bool enabled = 5 [default=false];
}

message Provision { // network -> local
    required Server server = 1;
}

message ProvisionResponse { // local -> network
    required bool ok = 1;
}

message PackageRequest { // local -> network
    required P3Meta p3 = 1;
}

message PackageResponse { // network -> local
    required bool ok = 1;
    optional PackageData data = 2;
}

message Deprovision { // network -> local
    required string uuid = 1;
    required bool force = 2 [default=false]; // if true, local should terminate the process without using shutdown steps
}

message ServerShutdown { // local -> network
    required string uuid = 1;
}

message SendInput {
    required string id = 1;
    required string input = 2;
}

message C_CoordinatorListResponse {
    repeated LocalCoordinator coordinators = 1;
}

message C_Provision {
    required P3Meta p3 = 1;
    optional string coordinator = 2;
    optional string serverName = 3;
    repeated Property properties = 4;
}

message C_ProvisionResponse {
    required bool ok = 1;
    optional string coordinatorId = 2;
    optional string serverId = 3;
}

message C_Deprovision {
    required string coordinatorId = 1;
    required string serverId = 2;
    required bool force = 3 [default=false];
}

message C_Shutdown {
    required string uuid = 1;
}

message C_Promote {
    required P3Meta p3 = 1;
}

message C_CoordinatorCreated {
    required string uuid = 1;
    required string key = 2;
}

message C_SendInput {
    required string coordinatorId = 1;
    required string serverId = 2;
    required string input = 3;
}

message BaseCommand {
    enum CommandType {
        // Coordination commands
        SYNC = 1;
        PROVISION = 2;
        PROVISION_RESPONSE = 3;
        PACKAGE_REQUEST = 4;
        PACKAGE_RESPONSE = 5;
        DEPROVISION = 6;
        SERVER_SHUTDOWN = 7;
        SHUTDOWN = 8; // no message body
        SEND_INPUT = 9;

        // Client commands
        C_GET_COORDINATOR_LIST = 10; // no message body
        C_COORDINATOR_LIST_RESPONSE = 11;
        C_PROVISION = 12;
        C_PROVISION_RESPONSE = 13;
        C_DEPROVISION = 14;
        C_SHUTDOWN = 15;
        C_PROMOTE = 16;
        C_CREATE_COORDINATOR = 17; // no message body
        C_COORDINATOR_CREATED = 18;
        C_SEND_INPUT = 19;
    }

    required CommandType type = 1;

    optional Sync sync = 2;
    optional Provision provision = 3;
    optional ProvisionResponse provisionResponse = 4;
    optional PackageRequest packageRequest = 5;
    optional PackageResponse packageResponse = 6;
    optional Deprovision deprovision = 7;
    optional ServerShutdown serverShutdown = 8;
    optional SendInput sendInput = 9;

    optional C_CoordinatorListResponse c_coordinatorListResponse = 10;
    optional C_Provision c_provision = 11;
    optional C_ProvisionResponse c_provisionResponse = 12;
    optional C_Deprovision c_deprovision = 13;
    optional C_Shutdown c_shutdown = 14;
    optional C_Promote c_promote = 15;
    optional C_CoordinatorCreated c_coordinatorCreated = 16;
    optional C_SendInput c_sendInput = 17;
}