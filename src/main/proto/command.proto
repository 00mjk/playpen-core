package io.playpen.core.protocol;

option java_outer_classname = "Commands";

import "coordinator.proto";
import "p3.proto";

message Sync {
    optional string name = 1;

    repeated Resource resources = 2;

    repeated string attributes = 3;

    repeated Server servers = 4;

    required bool enabled = 5 [default=false];
}

message Provision {
    required Server server = 1;
}

message ProvisionResponse {
    required bool ok = 1;
}

message PackageRequest {
    required P3Meta p3 = 1;
}

message PackageResponse {
    required bool ok = 1;
    optional PackageData data = 2;
}

message SplitPackageResponse {
    required bool ok = 1;
    optional SplitPackageData data = 2;
}

message PackageChecksumRequest {
    required P3Meta p3 = 1;
}

message PackageChecksumResponse {
    required bool ok = 1;
    optional string checksum = 2;
}

message Deprovision {
    required string uuid = 1;
    required bool force = 2 [default=false]; // if true, local should terminate the process without using shutdown steps
}

message ServerShutdown {
    required string uuid = 1;
}

message SendInput {
    required string id = 1;
    required string input = 2;
}

message AttachConsole {
    required string serverId = 1;
    required string consoleId = 2;
}

message ConsoleMessage {
    required string consoleId = 1;
    required string value = 2;
}

message DetachConsole {
    required string consoleId = 1;
}

message FreezeServer {
    required string uuid = 1;
}

message C_CoordinatorListResponse {
    repeated LocalCoordinator coordinators = 1;
}

message C_Provision {
    required P3Meta p3 = 1;
    optional string coordinator = 2;
    optional string serverName = 3;
    repeated Property properties = 4;
}

message C_ProvisionResponse {
    required bool ok = 1;
    optional string coordinatorId = 2;
    optional string serverId = 3;
}

message C_Deprovision {
    required string coordinatorId = 1;
    required string serverId = 2;
    required bool force = 3 [default=false];
}

message C_Shutdown {
    required string uuid = 1;
}

message C_Promote {
    required P3Meta p3 = 1;
}

message C_CreateCoordinator {
    optional string keyName = 1;
}

message C_CoordinatorCreated {
    required string uuid = 1;
    required string key = 2;
}

message C_SendInput {
    required string coordinatorId = 1;
    required string serverId = 2;
    required string input = 3;
}

message C_AttachConsole {
    required string coordinatorId = 1;
    required string serverId = 2;
}

message C_ConsoleAttached {
    optional string consoleId = 1;
    required bool ok = 2;
}

message C_ConsoleMessage {
    required string value = 1;
    required string consoleId = 2;
}

message C_ConsoleDetached {
    required string consoleId = 1;
    required bool useServerId = 2 [default = false];
}

message C_DetachConsole {
    optional string consoleId = 1;
}

message C_FreezeServer {
    required string coordinatorId = 1;
    required string serverId = 2;
}

message C_UploadPackage {
    required PackageData data = 1;
}

message C_UploadSplitPackage {
    optional SplitPackageData data = 2;
}

message C_Ack {
    optional string result = 1;
}

message C_PackageList {
    repeated P3Meta packages = 1;
}

message C_AccessDenied {
    required string result = 1;
    required string tid = 2;
}

message BaseCommand {
    enum CommandType {
        // Coordination commands
        NOOP = 0;
        SYNC = 1;
        PROVISION = 2;
        PROVISION_RESPONSE = 3;
        PACKAGE_REQUEST = 4;
        PACKAGE_RESPONSE = 5;
        DEPROVISION = 6;
        SERVER_SHUTDOWN = 7;
        SHUTDOWN = 8; // no message body
        SEND_INPUT = 9;
        ATTACH_CONSOLE = 10;
        CONSOLE_MESSAGE = 11;
        DETACH_CONSOLE = 12;
        FREEZE_SERVER = 26;
        PACKAGE_CHECKSUM_REQUEST = 35;
        PACKAGE_CHECKSUM_RESPONSE = 36;
        SPLIT_PACKAGE_RESPONSE = 37;

        // Client commands
        C_GET_COORDINATOR_LIST = 13; // no message body
        C_COORDINATOR_LIST_RESPONSE = 14;
        C_PROVISION = 15;
        C_PROVISION_RESPONSE = 16;
        C_DEPROVISION = 17;
        C_SHUTDOWN = 18;
        C_PROMOTE = 19;
        C_CREATE_COORDINATOR = 20; // no message body
        C_COORDINATOR_CREATED = 21;
        C_SEND_INPUT = 22;
        C_ATTACH_CONSOLE = 23;
        C_CONSOLE_ATTACHED = 31;
        C_CONSOLE_MESSAGE = 24;
        C_CONSOLE_DETACHED = 32;
        C_DETACH_CONSOLE = 25;
        C_FREEZE_SERVER = 27;
        C_UPLOAD_PACKAGE = 28;
        C_UPLOAD_SPLIT_PACKAGE = 38;
        C_ACK = 30;
        C_REQUEST_PACKAGE_LIST = 33; // no message body
        C_PACKAGE_LIST = 34;
        C_ACCESS_DENIED = 39;
    }

    required CommandType type = 1;

    optional Sync sync = 2;
    optional Provision provision = 3;
    optional ProvisionResponse provisionResponse = 4;
    optional PackageRequest packageRequest = 5;
    optional PackageResponse packageResponse = 6;
    optional Deprovision deprovision = 7;
    optional ServerShutdown serverShutdown = 8;
    optional SendInput sendInput = 9;
    optional AttachConsole attachConsole = 10;
    optional ConsoleMessage consoleMessage = 11;
    optional DetachConsole detachConsole = 12;
    optional FreezeServer freezeServer = 23;
    optional PackageChecksumRequest checksumRequest = 33;
    optional PackageChecksumResponse checksumResponse = 34;
    optional SplitPackageResponse splitPackageResponse = 35;

    optional C_CoordinatorListResponse c_coordinatorListResponse = 13;
    optional C_Provision c_provision = 14;
    optional C_ProvisionResponse c_provisionResponse = 15;
    optional C_Deprovision c_deprovision = 16;
    optional C_Shutdown c_shutdown = 17;
    optional C_Promote c_promote = 18;
    optional C_CreateCoordinator c_createCoordinator = 28;
    optional C_CoordinatorCreated c_coordinatorCreated = 19;
    optional C_SendInput c_sendInput = 20;
    optional C_AttachConsole c_attachConsole = 21;
    optional C_ConsoleAttached c_consoleAttached = 29;
    optional C_ConsoleMessage c_consoleMessage = 22;
    optional C_ConsoleDetached c_consoleDetached = 30;
    optional C_DetachConsole c_detachConsole = 31;
    optional C_FreezeServer c_freezeServer = 24;
    optional C_UploadPackage c_uploadPackage = 25;
    optional C_Ack c_ack = 27;
    optional C_PackageList c_packageList = 32;
    optional C_UploadSplitPackage c_uploadSplitPackage = 37;
    optional C_AccessDenied c_accessDenied = 38;
}